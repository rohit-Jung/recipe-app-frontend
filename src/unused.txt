import { FC, useState, useRef } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { Button } from "../ui/Button";
import { useOutsideClick } from "@/hooks/use-outside-click"; // Adjust the import path as needed

interface NewsLetterCardProps {}

const NewsLetterCard: FC<NewsLetterCardProps> = () => {
  const [isExpanded, setIsExpanded] = useState(false);
  const ref = useRef<HTMLDivElement>(null);

  useOutsideClick(ref, () => setIsExpanded(false)); // Use the hook to detect outside clicks

  const handleToggle = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <>
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/20 h-full w-full z-10"
          />
        )}
      </AnimatePresence>
      <AnimatePresence>
        {isExpanded && (
          <div className="fixed inset-0 grid place-items-center z-[100]">
            <motion.button
            layout
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0, transition: { duration: 0.05 } }}
              className="flex absolute top-2 right-2 lg:hidden items-center justify-center bg-white rounded-full h-6 w-6"
              onClick={() => setIsExpanded(false)}
            >
              <CloseIcon />
            </motion.button>
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.9 }}
              transition={{ duration: 0.3 }}
              ref={ref}
              className="w-full max-w-[500px] md:h-fit md:max-h-[90%] flex flex-col bg-white dark:bg-neutral-900 sm:rounded-3xl overflow-hidden"
            >
              <div className="relative w-full flex items-center">
                <img
                  src="/women_cooking.svg"
                  alt=""
                  className="absolute right-16 -bottom-10 md:flex hidden"
                />
                <div className="p-4">
                  <h1 className="text-3xl font-bold">Want exciting recipes?</h1>
                  <p className="text-xl mt-2">Subscribe to our newsletter</p>
                  <div className="flex text-black items-center justify-between shadow-inner bg-white py-2 px-6 rounded-xl mt-4">
                    <input
                      className="focus:outline-none outline-none w-full h-full"
                      placeholder="Type your email"
                    />
                    <Button>Subscribe</Button>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
      <div
        onClick={handleToggle}
        className="relative mt-16 rounded-[3rem] w-full flex items-center  bg-black md:px-24 px-10 h-72 text-white py-5"
      >
        <div className="md:w-[50%] w-full text-left h-full flex flex-col py-10 justify-between">
          <h1 className="md:text-5xl text-2xl font-bold">
            Want exciting recipes ?
          </h1>
          <p className="text-2xl font-semibold">Subscribe to our news letter</p>
          <div className="flex text-black items-center justify-between shadow-inner bg-white py-2 px-6 rounded-xl">
            <input
              className="focus:outline-none outline-none w-full h-full"
              placeholder="Type your email"
            />
            <Button>Subscribe</Button>
          </div>
        </div>
        <div className="absolute right-16 -bottom-10 md:flex hidden ">
          <img src="/women_cooking.svg" alt="" className="" />
        </div>
      </div>
    </>
  );
};

export default NewsLetterCard;

const CloseIcon = () => {
  return (
    <motion.svg
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0, transition: { duration: 0.05 } }}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4 text-black"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M18 6l-12 12" />
      <path d="M6 6l12 12" />
    </motion.svg>
  );
};


import { motion } from "framer-motion";

export interface CardProps {
  title: string;
  description: string;
  src: string;
  ctaText: string;
  ctaLink: string;
  content: () => JSX.Element;
  onClick: () => void;
  isActive: boolean;
}

const Card: React.FC<CardProps> = ({
  title,
  description,
  src,
  ctaText,
  ctaLink,
  content,
  onClick,
  isActive,
}) => {
  return (
    <motion.div
      layoutId={`card-${title}`}
      key={title}
      onClick={onClick}
      className={`p-4 flex flex-col ${
        isActive ? "bg-neutral-100" : "hover:bg-neutral-50"
      } dark:${
        isActive ? "bg-neutral-800" : "hover:bg-neutral-800"
      } rounded-xl cursor-pointer`}
    >
      <div className="flex gap-4 flex-col w-full">
        <motion.div layoutId={`image-${title}`}>
          <img
            width={100}
            height={100}
            src={src}
            alt={title}
            className="h-60 w-full rounded-lg object-cover object-top"
          />
        </motion.div>
        <div className="flex justify-center items-center flex-col">
          <motion.h3
            layoutId={`title-${title}`}
            className="font-medium text-neutral-800 dark:text-neutral-200 text-center md:text-left text-base"
          >
            {title}
          </motion.h3>
          <motion.p
            layoutId={`description-${description}`}
            className="text-neutral-600 dark:text-neutral-400 text-center md:text-left text-base"
          >
            {description}
          </motion.p>
        </div>
      </div>
    </motion.div>
  );
};

export default Card;


import { FC, useEffect, useRef, useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { useOutsideClick } from "@/hooks/use-outside-click";
import Card from "./ViewCard";
import { CardProps } from "./ViewCard";

interface ExpandableCardProps {
  cards: CardProps[]; 
}

const ExpandableCard: FC<ExpandableCardProps> = ({ cards }) => {
  const [active, setActive] = useState<CardProps | null>(null);
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    function onKeyDown(event: KeyboardEvent) {
      if (event.key === "Escape") {
        setActive(null);
      }
    }

    document.body.style.overflow = active ? "hidden" : "auto";

    window.addEventListener("keydown", onKeyDown);
    return () => window.removeEventListener("keydown", onKeyDown);
  }, [active]);

  useOutsideClick(ref, () => setActive(null));

  return (
    <>
      <AnimatePresence>
        {active && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/20 h-full w-full z-10"
          />
        )}
      </AnimatePresence>
      <AnimatePresence>
        {active && (
          <div className="fixed inset-0 grid place-items-center z-[100]">
            <motion.button
              key={`button-${active.title}`}
              layout
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0, transition: { duration: 0.05 } }}
              className="flex absolute top-2 right-2 lg:hidden items-center justify-center bg-white rounded-full h-6 w-6"
              onClick={() => setActive(null)}
            >
              <CloseIcon />
            </motion.button>
            <motion.div
              layoutId={`card-${active.title}`}
              ref={ref}
              className="w-full max-w-[500px] h-full md:h-fit md:max-h-[90%] flex flex-col bg-white dark:bg-neutral-900 sm:rounded-3xl overflow-hidden"
            >
              <motion.div layoutId={`image-${active.title}`}>
                <img
                  width={200}
                  height={200}
                  src={active.src}
                  alt={active.title}
                  className="w-full h-80 lg:h-80 sm:rounded-tr-lg sm:rounded-tl-lg object-cover object-top"
                />
              </motion.div>
              <div>
                <div className="flex justify-between items-start p-4">
                  <div>
                    <motion.h3
                      layoutId={`title-${active.title}`}
                      className="font-medium text-neutral-700 dark:text-neutral-200 text-base"
                    >
                      {active.title}
                    </motion.h3>
                    <motion.p
                      layoutId={`description-${active.description}`}
                      className="text-neutral-600 dark:text-neutral-400 text-base"
                    >
                      {active.description}
                    </motion.p>
                  </div>
                  <motion.a
                    layout
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    href={active.ctaLink}
                    target="_blank"
                    className="px-4 py-3 text-sm rounded-full font-bold bg-green-500 text-white"
                  >
                    {active.ctaText}
                  </motion.a>
                </div>
                <div className="pt-4 relative px-4">
                  <motion.div
                    layout
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    className="text-neutral-600 text-xs md:text-sm lg:text-base h-40 md:h-fit pb-10 flex flex-col items-start gap-4 overflow-auto dark:text-neutral-400 [mask:linear-gradient(to_bottom,white,white,transparent)] [scrollbar-width:none] [-ms-overflow-style:none] [-webkit-overflow-scrolling:touch]"
                  >
                    {typeof active.content === "function"
                      ? active.content()
                      : active.content}
                  </motion.div>
                </div>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
      <ul className="max-w-2xl mx-auto w-full grid grid-cols-1 md:grid-cols-2 items-start gap-4">
        {cards.map((card) => (
          <Card
            key={card.title}
            {...card}
            onClick={() => setActive(card)}
            isActive={active?.title === card.title}
          />
        ))}
      </ul>
    </>
  );
};

export default ExpandableCard;

export const CloseIcon = () => {
  return (
    <motion.svg
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0, transition: { duration: 0.05 } }}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className="h-4 w-4 text-black"
    >
      <path stroke="none" d="M0 0h24v24H0z" fill="none" />
      <path d="M18 6l-12 12" />
      <path d="M6 6l12 12" />
    </motion.svg>
  );
};
